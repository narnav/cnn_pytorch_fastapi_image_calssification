import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
from PIL import Image
import os

# Paths to dataset
train_dir = "dataset/train"
val_dir = "dataset/val"

# Define transformations
transform = transforms.Compose([
    transforms.Resize((128, 128)),  # Resize images to 128x128
    transforms.ToTensor(),          # Convert images to PyTorch tensors
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])  # Normalize
])

# Load datasets
train_dataset = ImageFolder(root=train_dir, transform=transform)
val_dataset = ImageFolder(root=val_dir, transform=transform)

# Data loaders
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

# Number of classes
num_classes = len(train_dataset.classes)
print(f"Classes: {train_dataset.classes}")

# Define CNN model
class CNN(nn.Module):
    def __init__(self, num_classes):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.fc1 = nn.Linear(64 * 32 * 32, 128)
        self.fc2 = nn.Linear(128, num_classes)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 64 * 32 * 32)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Initialize model, loss, and optimizer
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = CNN(num_classes=num_classes).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Function to train model with a new image
def train_with_image(image_path, label):
    # Open the image
    image = Image.open(image_path).convert("RGB")
    
    # Apply the transformations
    image = transform(image).unsqueeze(0).to(device)  # Add batch dimension and move to device
    label = torch.tensor([label]).to(device)  # Convert label to tensor and move to device
    
    # Train the model on this single image
    model.train()
    optimizer.zero_grad()
    
    outputs = model(image)
    loss = criterion(outputs, label)
    loss.backward()
    optimizer.step()
    
    print(f"Training with image {image_path}, Loss: {loss.item():.4f}")
    
    # Save the model after training
    model_path = "cnn_model_with_image.pth"
    torch.save(model.state_dict(), model_path)
    print(f"Model saved as {model_path}")

# Example usage of train_with_image function
# You can specify the image path and the correct label (for instance, 0 for the first class)
# image_path = "dog.jpg"  # Replace with the actual image path
# label = 1  # Replace with the appropriate class label for the image
# train_with_image(image_path, label)
